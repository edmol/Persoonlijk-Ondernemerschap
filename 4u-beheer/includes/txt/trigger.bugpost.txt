Source: http://platon.sk/projects/bug_view_advanced_page.php?f_bug_id=228

/*

validating user input with php

JavaScript validation is satisfactory in most case. 
In some cases, it is not reliable or flexible enough.

The reasons can be:
- no js support in client browser
- validadion requires access to database
- you don't want users to see what the validation is
so you need to use php validation, which is processed on the server.


USAGE:
1. place this file as trigger insert before and trigger update before

$opts['triggers']['insert']['before'] = './triggers/table_validation.php';

$opts['triggers']['update']['before'] = $opts['triggers']['insert']['before'];


2. modify to your needs (within MODIFY tags)

TODO:
consult js-regexp usage with experts
problems with 'help' vs 'help|A' vs 'help|AC' vs ...
make bad fields red/bold/whatever (css or hard coded ? )

AUTHOR:
michal palenik
uploaded to platon.sk on 10 april 2004

*/


$errors = false; // default, there is no error

/*
insert any php code that validates user input
the result should be associative array $errors as 
'col_name' => 'error message', where col_name is as 
defined in $opts and 'error message' is anything 
that you want to display to do user if there is 
no error, leave $errors at its default value (false)
*/

// <MODIFY> HERE

if(strlen($newvals['question']) < 10){
	$errors['question'] = "Question must be at least 10 characters long";
}

// END </MODIFY>

// double check for regexp from js validation

for ($k = 0; $k < $this->num_fds; $k++) {
	if (isset($this->fdd[$k]['js']['regexp'])) {
		$value = $newvals[$this->fds[$k]];
		if(!preg_match($this->fdd[$k]['js']['regexp'], $value)){
			$errors[$this->fds[$k]] = $this->fdd[$k]['js']['hint'];
		}
	}
}

// if no error, continue

if(!$errors) return true;

// filling user input in all columns first

foreach($newvals as $key => $value){

	$this->fdd[$key]['default'] = $value;

}

// error handling could use a language label for "Problem:

echo "\n".'<div style="background-color:#ffff00;color:#ff0000;padding:10px">';

echo "\n".'<ol>';

foreach($errors as $key => $val) {

	$this->fdd[$key]['help'] = "\n".'<li>'.$val.' '.$this->fdd[$key]['help'].'</li>';

}

echo "\n".'</ol>';

echo "\n".'</div>';

// emulating moreadd/more button

$this->operation = $this->labels['Add']; // language unspecific

$this->recreate_fdd();

$this->recreate_displayed();

// stopping the insert proccess

return false;

